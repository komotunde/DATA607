dbListTables(flights.upload)
flights <- dbReadTable(flights.upload,"flights")
dbWriteTable(flights.upload,"movie_rating",flights,overwrite=T)
flights
LOAD CSV WITH HEADERS FROM "file:/ProgramData/MySQL/MySQL Server 5.7/Uploads/airlines1.csv" AS row
?Neo4j
?RNeo4j
library(nycflights13)
library(knitr)
library(nycflights13)
library(knitr)
View(nycflights13)
nycflights13
View(flights)
install.packages("nycflights13")
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
library(knitr)
nycflights13
View(flights)
View(flights)
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
library(knitr)
nycflights13
?nycflights13
install.packages("nycflights13")
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
library(knitr)
nycflights13
nycflights13::airlines
nycflights13::planes
write.csv(nycflights::flights, "c:/ProgramData/MySQL/MySQL Server 5.7/Uploads/flights/flights.csv", row.names=FALSE)
write.csv(nycflights13::flights, "c:/ProgramData/MySQL/MySQL Server 5.7/Uploads/flights/flights.csv", row.names=FALSE)
write.csv(nycflights13::weather, "c:/ProgramData/MySQL/MySQL Server 5.7/Uploads/flights/weather.csv", row.names=FALSE)
write.csv(nycflights13::airlines, "c:/ProgramData/MySQL/MySQL Server 5.7/Uploads/flights/airlines.csv", row.names=FALSE)
write.csv(nycflights13::airports, "c:/ProgramData/MySQL/MySQL Server 5.7/Uploads/flights/airlines.csv", row.names=FALSE)
write.csv(nycflights13::planes, "c:/ProgramData/MySQL/MySQL Server 5.7/Uploads/flights/planes.csv")
?sqlconnection=
?sqlconnection
write.csv(nycflights13::flights, "c:/ProgramData/MySQL/MySQL Server 5.7/Uploads/flights/flights.csv", row.names=FALSE)
write.csv(nycflights13::weather, "c:/ProgramData/MySQL/MySQL Server 5.7/Uploads/flights/weather.csv", row.names=FALSE)
write.csv(nycflights13::airlines, "c:/ProgramData/MySQL/MySQL Server 5.7/Uploads/flights/airlines.csv", row.names=FALSE)
write.csv(nycflights13::airports, "c:/ProgramData/MySQL/MySQL Server 5.7/Uploads/flights/airports.csv", row.names=FALSE)
write.csv(nycflights13::planes, "c:/ProgramData/MySQL/MySQL Server 5.7/Uploads/flights/planes.csv")
library(IS606)
startLab("Lab7")
getwd()
load("more/mlb11.RData")
load("more/mlb11.RData")
View(mlb11)
#I would use a scatterplot in this
plot.runs <- lm(mlb11$runs~mlb11$at_bats)
#I would use a scatterplot in this
plot.runs <- lm(mlb11$runs~mlb11$at_bats)
plot.runs
#I would use a scatterplot in this
plot(mlb11$runs, mlb11$hits)
plot.runs <- lm(mlb11$runs~mlb11$at_bats)
abline(plot.runs)
#I would use a scatterplot in this
plot.runs <- lm(mlb11$runs~mlb11$at_bats)
plot(mlb11$runs, mlb11$hits)
abline(plot.runs)
#I would use a scatterplot in this
plot.runs <- lm(mlb11$runs~mlb11$at_bats)
plot(mlb11$runs, mlb11$at_bats)
abline(plot.runs)
#I would use a scatterplot in this
plot.runs <- lm(mlb11$runs~mlb11$at_bats)
plot(mlb11$at_bats, mlb11$runs)
abline(plot.runs)
cor(mlb11$runs, mlb11$at_bats)
#I would use a scatterplot in this
plot.runs <- lm(mlb11$runs~mlb11$at_bats)
plot(mlb11$at_bats, mlb11$runs)
abline(plot.runs)
#This seems to be fairly linear to me.
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
plot_ss(mlb11$at_bats, mlb11$runs)
m1 <- lm(runs ~ at_bats, data = mlb11)
summary(m1)
homeruns.runs<- lm(runs ~ homeruns, data = mlb11)
summary(homeruns.runs)
plot(mlb11$runs ~ mlb11$at_bats)
abline(m1)
summary(m1)
m <-
summary(m1)
m <- .6305
x <- 5578
b <- -2789.2429
y = (m*x) + b
y
runs.subset <- subset(mlb11, at_bats == 5578, select = runs)
runs.subset
y2 = subset(mlb11, at_bats==5579, select = runs)
y2
residual = y-runs
residual = y-713
residual = y-713
summary(m1)
m <- .6305
x <- 5578
b <- -2789.2429
y = (m*x) + b
y
#727.6861 runs. To determine the residual, we need to find the actual number of runs for 5578 at-bats.
runs = subset(mlb11, at_bats == 5578, select = runs)
runs
#the observed runs is 713 which is lower than our calculated observation (overestimation)
residual <- 713 - 72.6861
residual
res. <- 713 - 72.6861
res.
res. <- 713 - 712.6861
res.
res. <- 713 - 727.6861
res.
plot(m1$residuals ~ mlb11$at_bats)
abline(h = 0, lty = 3)  # adds a horizontal dashed line at y = 0
hist(m1$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)  # adds diagonal line to the normal prob plot
hits.runs<- lm(mlb11$runs~mlb11$hits)
plot(mlb11$hits, mlb11$runs)
abline(hits.runs)
summary(m1)
m2 <- lm(runs ~ hits, data = mlb11)
summary(m2)
homeruns.runs<- lm(mlb11$runs~mlb11$homeruns)
plot(mlb11$homeruns, mlb11$runs)
abline(homeruns.runs)
View(mlb11)
View(mlb11)
homeruns.runs<- lm(mlb11$runs~mlb11$homeruns)
plot(mlb11$homeruns, mlb11$runs)
abline(homeruns.runs)
batave.runs<- lm(mlb11$runs~mlb11$bat_avg)
plot(mlb11$bat_avg, mlb11$runs)
abline(batave.runs)
strikeouts.runs<- lm(mlb11$runs~mlb11$strikeouts)
plot(mlb11$strikeouts, mlb11$runs)
abline(batave.runs)
stolen.runs<- lm(mlb11$runs~mlb11$stolen_bases)
plot(mlb11$stolen_bases, mlb11$runs)
abline(stolen.runs)
wins.runs<- lm(mlb11$runs~mlb11$wins)
plot(mlb11$wins, mlb11$runs)
abline(wins.runs)
homeruns.runs<- lm(mlb11$runs~mlb11$homeruns)
plot(mlb11$homeruns, mlb11$runs)
abline(homeruns.runs)
batave.runs<- lm(mlb11$runs~mlb11$bat_avg)
plot(mlb11$bat_avg, mlb11$runs)
abline(batave.runs)
strikeouts.runs<- lm(mlb11$runs~mlb11$strikeouts)
plot(mlb11$strikeouts, mlb11$runs)
abline(strikeouts.runs)
stolen.runs<- lm(mlb11$runs~mlb11$stolen_bases)
plot(mlb11$stolen_bases, mlb11$runs)
abline(stolen.runs)
wins.runs<- lm(mlb11$runs~mlb11$wins)
plot(mlb11$wins, mlb11$runs)
abline(wins.runs)
m3 <- lm(runs ~ homeruns, data = mlb11)
summary(m2)
m4 <- lm(runs ~ bat_ave, data = mlb11)
m3 <- lm(runs ~ homeruns, data = mlb11)
summary(m2)
m4 <- lm(runs ~ bat_avg, data = mlb11)
summary(m4)
m5 <- lm(runs ~ strikeouts, data = mlb11)
summary(m5)
m6 <- lm(runs ~ stolen_bases, data = mlb11)
summary(m6)
m7 <- lm(runs ~ wins, data = mlb11)
summary(m7)
m3 <- lm(runs ~ homeruns, data = mlb11)
summary(m3) #
m4 <- lm(runs ~ bat_avg, data = mlb11)
summary(m4)
m5 <- lm(runs ~ strikeouts, data = mlb11)
summary(m5)
m6 <- lm(runs ~ stolen_bases, data = mlb11)
summary(m6)
m7 <- lm(runs ~ wins, data = mlb11)
summary(m7)
m3 <- lm(runs ~ homeruns, data = mlb11)
summary(m3) #Multiple R-squared:  0.6266,	Adjusted R-squared:  0.6132
m4 <- lm(runs ~ bat_avg, data = mlb11)
summary(m4) #Multiple R-squared:  0.6561,	Adjusted R-squared:  0.6438
m5 <- lm(runs ~ strikeouts, data = mlb11)
summary(m5) #Multiple R-squared:  0.002914,	Adjusted R-squared:  -0.0327
m6 <- lm(runs ~ stolen_bases, data = mlb11)
summary(m6) #Multiple R-squared:  0.002914,	Adjusted R-squared:  -0.0327
m7 <- lm(runs ~ wins, data = mlb11)
summary(m7)#Multiple R-squared:  0.361,	Adjusted R-squared:  0.3381
basepercent.runs<- lm(mlb11$runs~mlb11$new_onbase)
plot(mlb11$new_onbase, mlb11$runs)
abline(basepercent.runs)
slug.runs<- lm(mlb11$runs~mlb11$new_slug)
plot(mlb11$new_slug, mlb11$runs)
abline(slug.runs)
both.runs<- lm(mlb11$runs~mlb11$new_obs)
plot(mlb11$new_obs, mlb11$runs)
abline(both.runs)
m8 <- lm(runs ~ new_onbase, data = mlb11)
summary(m8) #Multiple R-squared:  0.1694,	Adjusted R-squared:  0.1397
m10 <- lm(runs ~ new_slug, data = mlb11)
summary(m9) #Multiple R-squared:  0.002914,	Adjusted R-squared:  -0.0327
m8 <- lm(runs ~ new_onbase, data = mlb11)
summary(m8) #Multiple R-squared:  0.1694,	Adjusted R-squared:  0.1397
m9 <- lm(runs ~ new_slug, data = mlb11)
summary(m9) #Multiple R-squared:  0.002914,	Adjusted R-squared:  -0.0327
m11 <- lm(runs ~ new_obs, data = mlb11)
summary(m11)#Multiple R-squared:  0.361,	Adjusted R-squared:  0.3381
library(RMongo)
mongo = mongoDbConnect(host = "localhost")
library(RMongo)
mongo = mongo.create(host = "localhost")
library(RMongo)
library(rJava)
mongo = mongo.create(host = "localhost")
install.packages("rmongdb")
?rmongodb
library(RMongo)
library(rJava)
mongoDbConnect("test", "localhost", 27017)
?mongoimporta
?sql connection
?sql
library(RMySQL)
dbConnect(MySQL(), user="root", password="N!cole09",
dbname="movies", host="localhost",client.flag=CLIENT_MULTI_STATEMENTS)
library(RMySQL)
dbConnect(MySQL(), user="komotunde", password="N!cole09",
dbname="nycflights", host="localhost",client.flag=CLIENT_MULTI_STATEMENTS)
library(RMongo)
library(rJava)
mongo <- mongoDbConnect("test", "localhost", 27017) #connects us to Mongo
library(devtools)
install_github(repo repo = "mongosoup/rmongodb")
library(devtools)
install_github(repo = "mongosoup/rmongodb")
library(rmongodb)
mongo <- mongo.create(host = "localhost")
mongo.is.connected(mongo)
mongo.get.database.collections(mongo, db = "nycflights")
DBNS <- "nycflights.airlines"
mongo.count(mongo, ns = DBNS)
library(RCurl)
airlines <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airlines.csv")
library(RCurl)
airlines <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airlines.csv")
airports <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airports.csv")
airlines <- read.csv(airlines)
getwd()
setwd("C:/Users/OluwakemiOmotunde/Desktop/DATA607")
library(RCurl)
airlines <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airlines.csv")
airports <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airports.csv")
airlines <- read.csv(airlines)
library(RCurl)
airlines <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airlines.csv")
airports <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airports.csv")
airlines <- read.csv(text = airlines)
airports <- read.csv(airports)
library(RCurl)
airlines <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airlines.csv")
airports <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airports.csv")
airlines <- read.csv(text = airlines)
airports <- read.csv(text = airports)
head(airlines)
head(airports)
library(RCurl)
airlines <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airlines.csv")
flights <- getURL("hhttps://raw.githubusercontent.com/komotunde/DATA607/master/Project4/flights.csv")
library(RCurl)
airlines <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airlines.csv")
flights <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/flights.csv")
airlines <- read.csv(text = airlines)
flights <- read.csv(text = flights)
head(airlines)
head(flights)
airlines <- lapply(split(airlines, 1:nrom(airlines)), function(x)mongo.bson.from.JSON)
library(jsonlite)
airlines <- lapply(split(airlines, 1:nrom(airlines)), function(x)mongo.bson.from.JSON)
library(jsonlite)
airlines <- lapply(split(airlines, 1:nrow(airlines)), function(x)mongo.bson.from.JSON)
airlines
airlines[1:3]
library(jsonlite)
airlines <- lapply(split(airlines, 1:nrow(airlines)), function(x)mongo.bson.from.JSON)
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
library(RMySQL)
dbConnect(MySQL(), user="komotunde", password="N!cole09",
dbname="nycflights", host="localhost",client.flag=CLIENT_MULTI_STATEMENTS)
#connect to MySQL
library(devtools)
install_github(repo = "mongosoup/rmongodb") #installs the rmongodb package
library(rmongodb)
mongo <- mongo.create(host = "localhost")
mongo.is.connected(mongo)
#connect to Mongo
mongo.get.database.collections(mongo, db = "nycflights")
DBNS <- "nycflights.airlines"
mongo.count(mongo, ns = DBNS)
library(RCurl)
airlines <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airlines.csv")
flights <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/flights.csv")
airlines <- read.csv(text = airlines)
flights <- read.csv(text = flights)
head(airlines)
head(flights)
library(jsonlite)
airlines <- lapply(split(airlines, 1:nrow(airlines)), function(x)mongo.bson.from.JSON)
airlines[1:3]
flights <- lapply(split(flights, 1:nrow(flights)), function(x)mongo.bson.from.JSON)
library(RCurl)
airlines <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airlines.csv")
flights <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/flights.csv")
airlines <- read.csv(text = airlines)
flights <- read.csv(text = flights)
head(airlines)
head(flights)
library(jsonlite)
airlines <- lapply(split(airlines, 1:nrow(airlines)), function(x)mongo.bson.from.JSON(toJSON(x)))
airlines[1:3]
flights <- lapply(split(flights, 1:nrow(flights)), function(x)mongo.bson.from.JSON(toJSON(x)))
library(nycflights13)
library(RMySQL)
dbConnect(MySQL(), user="komotunde", password="N!cole09",
dbname="nycflights", host="localhost",client.flag=CLIENT_MULTI_STATEMENTS)
#connect to MySQL
library(devtools)
install_github(repo = "mongosoup/rmongodb") #installs the rmongodb package
library(rmongodb)
mongo <- mongo.create(host = "localhost")
mongo.is.connected(mongo)
#connect to Mongo
db.1 <- "test.nycflights"
newmongo.db1 <- "test.nycflights.airlines"
newmongo.db2 <- "test.nycflights.flights"
mongo.get.database.collections(mongo, db1)
library(rmongodb)
mongo <- mongo.create(host = "localhost")
mongo.is.connected(mongo)
#connect to Mongo
db.1 <- "test.nycflights"
newmongo.db1 <- "test.nycflights.airlines"
newmongo.db2 <- "test.nycflights.flights"
mongo.get.database.collections(mongo, db.1)
#create database and collection names
mongo.get.database.collections(mongo, db.1)
library(RCurl)
airlines <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airlines.csv")
flights <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/flights.csv")
airlines <- read.csv(text = airlines)
flights <- read.csv(text = flights)
head(airlines)
head(flights)
mongo.insert.batch(mongo, newmongo.db1, airlines)
class(flights)
library(jsonlite)
airlines <- lapply(split(airlines, 1:nrow(airlines)), function(x)mongo.bson.from.JSON(toJSON(x)))
airlines[1:3]
flights <- lapply(split(flights, 1:nrow(flights)), function(x)mongo.bson.from.JSON(toJSON(x)))
class(airlines)
flights[1:3]
class(flights)
mongo.insert.batch(mongo, newmongo.db1, airlines)
mongo.insert.batch(mongo, newmongo.db2, flights)
mongo.count(mongo, newmongo.db1, query = '{"carrier":"AA"}')
mongo.count(mongo, newmongo.db1, query = '{"carrier":"US"}')
mongo.count(mongo, newmongo.db1, query = '{"carrier":"OO"}')
flights[1:3]
airlines[1:3]
mongo.count(mongo, newmongo.db1, query = '{"carrier":"2"}')
mongo.count(mongo, newmongo.db1, query = '{"carrier":"AS"}')
mongo.count(mongo, newmongo.db1, query = '{"carrier":"9E"}')
mongo.count(mongo, newmongo.db1, query = '{"carrier":"9E"}')
#at this point I am not returning any values.
mongo.count(mongo, newmongo.db2, query = '{"carrier":"UA"}')
mongo.insert.batch(mongo, newmongo.db1, airlines)
mongo.insert.batch(mongo, newmongo.db2, flights)
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
library(RMySQL)
dbConnect(MySQL(), user="komotunde", password="N!cole09",
dbname="nycflights", host="localhost",client.flag=CLIENT_MULTI_STATEMENTS)
#connect to MySQL
library(devtools)
install_github(repo = "mongosoup/rmongodb") #installs the rmongodb package
library(rmongodb)
mongo <- mongo.create(host = "localhost")
mongo.is.connected(mongo)
#connect to Mongo
db.1 <- "test.nycflights"
newmongo.db1 <- "test.nycflights.airlines"
newmongo.db2 <- "test.nycflights.flights"
mongo.get.database.collections(mongo, db.1)
#create database and collection names
library(RCurl)
airlines <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airlines.csv")
flights <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/flights.csv")
airlines <- read.csv(text = airlines)
flights <- read.csv(text = flights)
head(airlines)
head(flights)
library(jsonlite)
airlines <- lapply(split(airlines, 1:nrow(airlines)), function(x)mongo.bson.from.JSON(toJSON(x)))
airlines[1:3]
flights <- lapply(split(flights, 1:nrow(flights)), function(x)mongo.bson.from.JSON(toJSON(x)))
flights[1:3]
mongo.insert.batch(mongo, newmongo.db1, airlines)
mongo.insert.batch(mongo, newmongo.db2, flights)
mongo.count(mongo, newmongo.db1, query = '{"carrier":"9E"}')
#at this point I am not returning any values.
mongo.count(mongo, newmongo.db2, query = '{"carrier":"UA"}')
#neither of these returned anything so I will go back and make some changes.
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
library(RMySQL)
dbConnect(MySQL(), user="komotunde", password="N!cole09",
dbname="nycflights", host="localhost",client.flag=CLIENT_MULTI_STATEMENTS)
#connect to MySQL
library(devtools)
install_github(repo = "mongosoup/rmongodb") #installs the rmongodb package
library(rmongodb)
mongo <- mongo.create(host = "localhost")
mongo.is.connected(mongo)
#connect to Mongo
db.1 <- "test.nycflights"
newmongo.db1 <- "test.nycflights.airlines"
newmongo.db2 <- "test.nycflights.flights"
mongo.get.database.collections(mongo, db.1)
mongo.get.database.collections(mongo, bd.2)
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
library(RMySQL)
dbConnect(MySQL(), user="komotunde", password="N!cole09",
dbname="nycflights", host="localhost",client.flag=CLIENT_MULTI_STATEMENTS)
#connect to MySQL
library(devtools)
install_github(repo = "mongosoup/rmongodb") #installs the rmongodb package
library(rmongodb)
mongo <- mongo.create(host = "localhost")
mongo.is.connected(mongo)
#connect to Mongo
db.1 <- "test.nycflights"
newmongo.db1 <- "test.nycflights.airlines"
mongo.get.database.collections(mongo, db.1)
#create database and collection names
library(RCurl)
airlines <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airlines.csv")
airlines <- read.csv(text = airlines)
head(airlines)
library(jsonlite)
airlines <- lapply(split(airlines, 1:nrow(airlines)), function(x)mongo.bson.from.JSON(toJSON(x)))
airlines[1:3]
mongo.insert.batch(mongo, newmongo.db1, airlines)
mongo.count(mongo, newmongo.db1, query = '{"carrier":"9E"}')
#at this point I am not returning any values.
mongo.count(mongo, newmongo.db1, query = '{"carrier":"UA"}')
#neither of these returned anything so I will go back and make some changes.
mongo.find.await.data(mongo, newmongo.db1, query = '{"carrier":"9E"}')
mongo.find.all(mongo, newmongo.db1, query = '{"carrier":"9E"}')
#at this point I am not returning any values.
mongo.find.all(mongo, newmongo.db1, query = '{"carrier":"UA"}')
#neither of these returned anything so I will go back and make some changes.
library(rmongodb)
mongo <- mongo.create(host = "localhost")
mongo.is.connected(mongo)
#connect to Mongo
db.1 <- "test.nycflights"
newmongo.db1 <- "test.nycflights.airlines"
mongo.get.database.collections(mongo, db.1)
#create database and collection names
library(RCurl)
airlines <- getURL("https://raw.githubusercontent.com/komotunde/DATA607/master/Project4/airlines.csv")
airlines <- read.csv(text = airlines)
head(airlines)
library(jsonlite)
airlines1 <- lapply(split(airlines, 1:nrow(airlines)), function(x)mongo.bson.from.JSON(toJSON(x)))
airlines[1:3]
library(jsonlite)
airlines1 <- lapply(split(airlines, 1:nrow(airlines)), function(x)mongo.bson.from.JSON(toJSON(x)))
airlines1[1:3]
mongo.insert.batch(mongo, newmongo.db1, airlines1)
mongo.find.all(mongo, newmongo.db1, query = '{"carrier":"9E"}')
#at this point I am not returning any values.
mongo.find.all(mongo, newmongo.db1, query = '{"carrier":"UA"}')
#neither of these returned anything so I will go back and make some changes.
mongo.count(mongo, newmongo.db1, query = '{"name":"Envoy Air
"}')
mongo.find.all(mongo, newmongo.db1, query = '{"carrier":"9E"}')
#at this point I am not returning any values.
mongo.count(mongo, newmongo.db1, query = '{"name":"Envoy Air"}')
#neither of these returned anything so I will go back and make some changes.
mongo.count(mongo, newmongo.db1, query = '{"carrier":"9E"}')
#at this point I am not returning any values.
mongo.count(mongo, newmongo.db1, query = '{"name":"Envoy Air"}')
#neither of these returned anything so I will go back and make some changes.
mongo.count(mongo, newmongo.db1, query = '{"carrier":"9E"}')
#at this point I am not returning any values.
mongo.count(mongo, newmongo.db1, query = '{"name":"Envoy Air"}')
#neither of these returned anything so I will go back and make some changes.
